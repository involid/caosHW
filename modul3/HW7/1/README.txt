Все тесты запускаются скриптом run.sh
Ожидаемое имя файла с программой: epoll_read_write_socket.c
(Я всё ещё поленился сделать его аргументом скрипта)

Если не установлен colordiff, установить
Можно посмотреть комментарии к какому-то из предыдущих тестов для установки

Тесты состоят из нескольких частей

Во-первых, проверяется, что клиентам поступили корректные ответы
Проверка происходит автоматически с помощью diff
Скрипт выводит результаты проверки
Если есть отличия от ожидаемого, то можно:
- в директории output посмотреть ответы программы
- в директории output_expected посмотреть ожидаемые ответы

Во-вторых, нужно проверить, что программа завершается корректно
Если это не так, то могут возникать ошибки в первой части
Для этого есть директория output_debug

processes_list.txt содержит вывод списка процессов после работы программы
Если там есть названия: watch_exit_or_signal, http_server, A, A_not_write, B, C или D
То скорее всего какая-то из программ просто не завершается, это TL
Нужно ещё раз посмотреть список ps -a
После чего убить эти процессы с помощью kill
Если не убиваются, то использовать kill -INT
Или kill -KILL в крайнем случае

Вывод программы-сервера перенаправляется в два файла
server_stdout.txt и server_stderr.txt для соответствующих дескрипторов

Помимо вывода программы, там ещё будет вывод обёртки над программой
Вряд ли в этом выводе обёртки будет что-то другое, кроме одной строки в конце server_stdout.txt
Если эта строка есть EXIT with return code 0, то программа корректно обработала сигналы
Иначе эта строка должна иметь вид: SIGNAL with signal <номер сигнала>
Это означает, что программа была убита сигналом
Можно посмотреть, что это был за сигнал, посмотрев в таблицу с помощью kill -l

Если там был сигнал SIGTERM, то нужно смотреть его обработку программой
ejudge это тоже проверяет
Если там был сигнал SIGPIPE, то скорее всего проблемы в этом нет
Это получается с помощью A_not_write.c
Это не очень корректная проверка, но, кажется, если один клиент роняет сервер, это не очень хорошо
Можно либо заблокировать SIGPIPE в самой программе
Либо, если не хочется это обрабатывать, раскомментировать строку sleep(1) в A_not_write.c

Не уверен, что тесты хороши в плане завершения работы с клиентами
Потому что клиенты ждут ответа от сервера, причём сколь угодно длинного
И разрывает это взаимное ожидание только сигнал SIGTERM
Но решил оставить в таком виде
